# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform Push Plan'

on:
  push:
    branches:
    - main
  pull_request:
#    - feature/*

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.4

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: ./terraform
      id: fmt
      run: terraform fmt -diff=true -check=true

    - name: Post Format to GitHub PR
      uses: actions/github-script@v1
      if: ${{ !contains(steps.fmt.outputs.stdout, 'No changes.') }}
      env:
        STDOUT: "${{ steps.fmt.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        # NOTE: 区切り文字で囲まれた範囲のみを出力する
        script: |
          const lines = process.env.STDOUT.split('\n')
          const separator = '-'.repeat(72)
          let index = lines.indexOf(separator)
          let outputLines = lines.slice(index + 1)
          index = outputLines.indexOf(separator)
          if (index) {
            outputLines = outputLines.slice(0, index)
          }
          const fmtOutput = '```' + outputLines.join('\n') + '```'
          const output = `<details><summary>terraform fmt:</summary>\n\n${fmtOutput}\n\n</details>`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./terraform/
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      working-directory: ./terraform/
      run: terraform plan -no-color -lock=false

    - name: Post Plan to GitHub PR
      uses: actions/github-script@v1
      if: ${{ !contains(steps.plan.outputs.stdout, 'No changes.') }}
      env:
        STDOUT: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        # NOTE: 区切り文字で囲まれた範囲のみを出力する
        script: |
          const lines = process.env.STDOUT.split('\n')
          const separator = '-'.repeat(72)
          let index = lines.indexOf(separator)
          let outputLines = lines.slice(index + 1)
          index = outputLines.indexOf(separator)
          if (index) {
            outputLines = outputLines.slice(0, index)
          }
          const planOutput = '```' + outputLines.join('\n') + '```'
          const output = `<details><summary>terraform plan:</summary>\n\n${planOutput}\n\n</details>`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      working-directory: ./terraform/
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve